Index: src/main/java/network/client/Client.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package network.client;\r\n\r\nimport thundergames.MoleGames;\r\nimport network.util.Network;\r\nimport network.util.Packet;\r\nimport network.util.Packets;\r\n\r\nimport java.io.IOException;\r\nimport java.net.ConnectException;\r\nimport java.net.Socket;\r\n\r\npublic class Client extends Network {\r\n  /**\r\n   * @param port of the server to connect to if empty its 291220\r\n   * @param ip   of the server to connect to if empty its \"localhost\"\r\n   */\r\n\r\n  private ClientThread clientThread;\r\n  private int id;\r\n  private int gameID;\r\n  private static Client client;\r\n  private final ClientPacketHandler clientPacketHandler;\r\n  private static final boolean keyListener = true;\r\n\r\n  public static boolean isKeyListener() {\r\n    return keyListener;\r\n  }\r\n\r\n  /**\r\n   * @param args\r\n   * @author Carina\r\n   * @use creates the main Thread for the Client logic\r\n   * @see MoleGames\r\n   */\r\n  public static void ClientMain(String... args) {\r\n    client = new Client(5000, \"127.0.0.1\");\r\n    client.create();\r\n  }\r\n\r\n  public Client(int port, String ip) {\r\n    super(port, ip);\r\n    clientPacketHandler = new ClientPacketHandler();\r\n  }\r\n\r\n  /**\r\n   * @throws IOException\r\n   * @author Carina\r\n   * @use Due to a bug where we are getting the constructor which is not contructed at the time we create the Constructor and call the create object to create the sockets and stream\r\n   * @see Client\r\n   */\r\n  @Override\r\n  protected void create() {\r\n    try {\r\n      socket = new Socket(ip, port);\r\n      clientThread = new ClientThread(socket, 0);\r\n      clientThread.start();\r\n      test();\r\n    } catch (ConnectException exe) {\r\n      System.out.println(\"Cant connect to server? Is it running?\");\r\n    } catch (IOException | InterruptedException e) {\r\n      e.printStackTrace();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @author Carina\r\n   * Logic to test some things!\r\n   */\r\n  public void test() throws InterruptedException, IOException {\r\n    clientThread.sendPacket(new Packet(Packets.CREATEGAME.getPacketType(), 0));\r\n    Thread.sleep(100);\r\n    clientThread.sendPacket(new Packet(Packets.JOINGAME.getPacketType(), \"0#spectator\"));\r\n  }\r\n\r\n  public ClientPacketHandler getClientPacketHandler() {\r\n    return clientPacketHandler;\r\n  }\r\n\r\n  public static Client getClient() {\r\n    return client;\r\n  }\r\n\r\n  public void setId(int id) {\r\n    this.id = id;\r\n  }\r\n\r\n  public ClientThread getClientThread() {\r\n    return clientThread;\r\n  }\r\n\r\n  public void setGameID(int gameID) {\r\n    this.gameID = gameID;\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/network/client/Client.java b/src/main/java/network/client/Client.java
--- a/src/main/java/network/client/Client.java	(revision 9d1d1a11a3be696f75d84a823bb498933e99899f)
+++ b/src/main/java/network/client/Client.java	(date 1635961098492)
@@ -32,7 +32,7 @@
    * @use creates the main Thread for the Client logic
    * @see MoleGames
    */
-  public static void ClientMain(String... args) {
+  public static void ClientMain() {
     client = new Client(5000, "127.0.0.1");
     client.create();
   }
Index: src/main/java/game/map/Map.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package game.map;\r\n\r\npublic abstract class Map {\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/game/map/Map.java b/src/main/java/game/map/Map.java
--- a/src/main/java/game/map/Map.java	(revision 9d1d1a11a3be696f75d84a823bb498933e99899f)
+++ b/src/main/java/game/map/Map.java	(date 1636016397467)
@@ -1,6 +1,73 @@
 package game.map;
 
-public abstract class Map {
+import java.util.ArrayList;
+import java.util.HashMap;
+
+public class Map {
+
+  private int radius;
+  private int floor;
+  private int maxFloors = -1;
+
+  public Map(int radius, int maxFloors) {
+    this.radius = radius;
+    this.maxFloors = maxFloors;
+  }
+
+  public Map(int radius) {
+    this.radius = radius;
+  }
+
+  private ArrayList<Field> fields = new ArrayList();
+  private HashMap<Integer, Field> fieldCounter = new HashMap<>();
+
+  private int id = 0;
+  public void createMap() {
+    fields.clear();
+    for (int row = 0; row < radius; row++) {
+      for (int column = 0; column < radius+row; column++){
+        Field field = new Field(id, null, null, null, null, null, null);
+        fieldCounter.put(id, field);
+        if(fieldCounter.containsKey(id-1)){
+          fieldCounter.get(id-1).setRight(field);
+          field.setLeft(fieldCounter.get(id-1));
+          if (row-1>0 && (id != 0 || id-radius*row -row  > 0 )){
+
 
+            // 0 4 9 15 22
+            // 0 -4*0 -0 = 0
+            //4 - 4*1 - 1 = 0
+            // 9 -4*2 - 2   = 0
+            // 15 -4*3
+            // 22 -4*4 -4+1 = 0
 
+
+          }
+        }
+          id++;
+      }
+    }
+    for (int row = radius-1; row > 0; row--){
+      for (int column = 0; column<radius+row-1; column++){
+
+      }
+    }
+  }
+  
+
+  private void createRow(boolean side){
+
+  }
+
+  public ArrayList<Field> getFields() {
+    return fields;
+  }
+
+  public int getRadius() {
+    return radius;
+  }
+
+  public void setRadius(int radius) {
+    this.radius = radius;
+  }
 }
Index: .run/MoleGames.run.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.run/MoleGames.run.xml b/.run/MoleGames.run.xml
new file mode 100644
--- /dev/null	(date 1635957249948)
+++ b/.run/MoleGames.run.xml	(date 1635957249948)
@@ -0,0 +1,16 @@
+<component name="ProjectRunConfigurationManager">
+  <configuration default="false" name="Server" type="Application" factoryName="Application">
+    <option name="MAIN_CLASS_NAME" value="thundergames.MoleGames" />
+    <module name="swtpra10.main" />
+    <option name="PROGRAM_PARAMETERS" value="-s" />
+    <extension name="coverage">
+      <pattern>
+        <option name="PATTERN" value="thundergames.*" />
+        <option name="ENABLED" value="true" />
+      </pattern>
+    </extension>
+    <method v="2">
+      <option name="Make" enabled="true" />
+    </method>
+  </configuration>
+</component>
\ No newline at end of file
Index: .run/Player.run.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.run/Player.run.xml b/.run/Player.run.xml
new file mode 100644
--- /dev/null	(date 1635957249927)
+++ b/.run/Player.run.xml	(date 1635957249927)
@@ -0,0 +1,12 @@
+<component name="ProjectRunConfigurationManager">
+  <configuration default="false" name="Player" type="Application" factoryName="Application" singleton="false">
+    <option name="ALTERNATIVE_JRE_PATH" value="11" />
+    <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="true" />
+    <option name="MAIN_CLASS_NAME" value="thundergames.MoleGames" />
+    <module name="swtpra10.main" />
+    <option name="PROGRAM_PARAMETERS" value="-p" />
+    <method v="2">
+      <option name="Make" enabled="true" />
+    </method>
+  </configuration>
+</component>
\ No newline at end of file
Index: src/main/java/thundergames/MoleGames.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package thundergames;\r\n\r\nimport game.util.MultiGameHandler;\r\nimport gameplay.ai.AI;\r\nimport network.client.Client;\r\nimport network.server.Server;\r\n\r\npublic class MoleGames {\r\n\r\n  private static MoleGames moleGames;\r\n  private Server server;\r\n  private MultiGameHandler gameHandler;\r\n  private static final boolean keyListener = true;\r\n  private AI AI;\r\n\r\n  public static boolean isKeyListener() {\r\n    return keyListener;\r\n  }\r\n\r\n  /**\r\n   * @author Carina\r\n   * @use MainClass start\r\n   */\r\n  public static void main(String... args) {\r\n    moleGames = new MoleGames();\r\n    if (args.length == 0) {\r\n      Client.ClientMain();\r\n    } else {\r\n      switch (args[0]) {\r\n        case \"-p\":\r\n        case \"p\":\r\n          Client.ClientMain();\r\n          break;\r\n        case \"-s\":\r\n        case \"s\":\r\n          moleGames.server = new Server(5000, \"127.0.0.1\");\r\n          moleGames.gameHandler = new MultiGameHandler();\r\n          moleGames.server.create();\r\n          break;\r\n        case \"-a\":\r\n        case \"a\":\r\n          new AI(true, args[1], Integer.parseInt(args[2]));\r\n      }\r\n    }\r\n  }\r\n\r\n  public static MoleGames getMoleGames() {\r\n    return moleGames;\r\n  }\r\n\r\n  public MultiGameHandler getGameHandler() {\r\n    return gameHandler;\r\n  }\r\n\r\n  public Server getServer() {\r\n    return server;\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/thundergames/MoleGames.java b/src/main/java/thundergames/MoleGames.java
--- a/src/main/java/thundergames/MoleGames.java	(revision 9d1d1a11a3be696f75d84a823bb498933e99899f)
+++ b/src/main/java/thundergames/MoleGames.java	(date 1635961098497)
@@ -10,12 +10,8 @@
   private static MoleGames moleGames;
   private Server server;
   private MultiGameHandler gameHandler;
-  private static final boolean keyListener = true;
   private AI AI;
 
-  public static boolean isKeyListener() {
-    return keyListener;
-  }
 
   /**
    * @author Carina
@@ -39,7 +35,7 @@
           break;
         case "-a":
         case "a":
-          new AI(true, args[1], Integer.parseInt(args[2]));
+          moleGames.AI = new AI(true, args[1], Integer.parseInt(args[2]));
       }
     }
   }
Index: src/main/java/game/map/Field.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package game.map;\r\n\r\npublic class Field {\r\n  private final int id;\r\n  private boolean occupied;\r\n  private final boolean hole;\r\n\r\n  public Field(int id, boolean occupied, boolean hole) {\r\n    this.id = id;\r\n    this.occupied = occupied;\r\n    this.hole = hole;\r\n  }\r\n\r\n  public void setOccupied(boolean occupied) {\r\n    this.occupied = occupied;\r\n  }\r\n\r\n  public boolean isOccupied() {\r\n    return occupied;\r\n  }\r\n\r\n  public boolean isHole() {\r\n    return hole;\r\n  }\r\n\r\n  public int getId() {\r\n    return id;\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/game/map/Field.java b/src/main/java/game/map/Field.java
--- a/src/main/java/game/map/Field.java	(revision 9d1d1a11a3be696f75d84a823bb498933e99899f)
+++ b/src/main/java/game/map/Field.java	(date 1635962515579)
@@ -3,12 +3,22 @@
 public class Field {
   private final int id;
   private boolean occupied;
-  private final boolean hole;
+  private boolean hole;
+  private Field leftTop;
+  private Field rightTop;
+  private Field leftBottom;
+  private Field rightBottom;
+  private Field left;
+  private Field right;
 
-  public Field(int id, boolean occupied, boolean hole) {
+  public Field(int id, Field leftTop, Field rightTop, Field leftBottom, Field rightBottom, Field left, Field right) {
     this.id = id;
-    this.occupied = occupied;
-    this.hole = hole;
+    this.leftTop = leftTop;
+    this.rightTop = rightTop;
+    this.leftBottom = leftBottom;
+    this.rightBottom = rightBottom;
+    this.left = left;
+    this.right = right;
   }
 
   public void setOccupied(boolean occupied) {
@@ -26,4 +36,56 @@
   public int getId() {
     return id;
   }
+
+  public void setHole(boolean hole) {
+    this.hole = hole;
+  }
+
+  public void setLeftTop(Field leftTop) {
+    this.leftTop = leftTop;
+  }
+
+  public void setRightTop(Field rightTop) {
+    this.rightTop = rightTop;
+  }
+
+  public void setLeftBottom(Field leftBottom) {
+    this.leftBottom = leftBottom;
+  }
+
+  public void setRightBottom(Field rightBottom) {
+    this.rightBottom = rightBottom;
+  }
+
+  public void setLeft(Field left) {
+    this.left = left;
+  }
+
+  public void setRight(Field right) {
+    this.right = right;
+  }
+
+  public Field getLeftTop() {
+    return leftTop;
+  }
+
+  public Field getRightTop() {
+    return rightTop;
+  }
+
+  public Field getLeftBottom() {
+    return leftBottom;
+  }
+
+  public Field getRightBottom() {
+    return rightBottom;
+  }
+
+  public Field getLeft() {
+    return left;
+  }
+
+  public Field getRight() {
+    return right;
+  }
 }
